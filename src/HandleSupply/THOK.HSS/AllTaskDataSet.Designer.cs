//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4927
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.HSS.Xsd {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AllTaskDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AllTaskDataSet : global::System.Data.DataSet {
        
        private AllTaskTableDataTable tableAllTaskTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AllTaskDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AllTaskDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AllTaskTable"] != null)) {
                    base.Tables.Add(new AllTaskTableDataTable(ds.Tables["AllTaskTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllTaskTableDataTable AllTaskTable {
            get {
                return this.tableAllTaskTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AllTaskDataSet cln = ((AllTaskDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AllTaskTable"] != null)) {
                    base.Tables.Add(new AllTaskTableDataTable(ds.Tables["AllTaskTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAllTaskTable = ((AllTaskTableDataTable)(base.Tables["AllTaskTable"]));
            if ((initTable == true)) {
                if ((this.tableAllTaskTable != null)) {
                    this.tableAllTaskTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AllTaskDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AllTaskDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAllTaskTable = new AllTaskTableDataTable();
            base.Tables.Add(this.tableAllTaskTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllTaskTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AllTaskDataSet ds = new AllTaskDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AllTaskTableRowChangeEventHandler(object sender, AllTaskTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllTaskTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSUPPLYNO;
            
            private global::System.Data.DataColumn columnSORTNO;
            
            private global::System.Data.DataColumn columnLINECODE;
            
            private global::System.Data.DataColumn columnBATCHNO;
            
            private global::System.Data.DataColumn columnSUPPLYBATCH;
            
            private global::System.Data.DataColumn columnORDERDATE;
            
            private global::System.Data.DataColumn columnORDERID;
            
            private global::System.Data.DataColumn columnCIGARETTECODE;
            
            private global::System.Data.DataColumn columnCIGARETTENAME;
            
            private global::System.Data.DataColumn columnCHANNELCODE;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnSTATUSNAME;
            
            private global::System.Data.DataColumn columnCHANNELNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableDataTable() {
                this.TableName = "AllTaskTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllTaskTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllTaskTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLYNOColumn {
                get {
                    return this.columnSUPPLYNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTNOColumn {
                get {
                    return this.columnSORTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINECODEColumn {
                get {
                    return this.columnLINECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BATCHNOColumn {
                get {
                    return this.columnBATCHNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLYBATCHColumn {
                get {
                    return this.columnSUPPLYBATCH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERDATEColumn {
                get {
                    return this.columnORDERDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERIDColumn {
                get {
                    return this.columnORDERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTECODEColumn {
                get {
                    return this.columnCIGARETTECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTENAMEColumn {
                get {
                    return this.columnCIGARETTENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHANNELCODEColumn {
                get {
                    return this.columnCHANNELCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSNAMEColumn {
                get {
                    return this.columnSTATUSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHANNELNAMEColumn {
                get {
                    return this.columnCHANNELNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableRow this[int index] {
                get {
                    return ((AllTaskTableRow)(this.Rows[index]));
                }
            }
            
            public event AllTaskTableRowChangeEventHandler AllTaskTableRowChanging;
            
            public event AllTaskTableRowChangeEventHandler AllTaskTableRowChanged;
            
            public event AllTaskTableRowChangeEventHandler AllTaskTableRowDeleting;
            
            public event AllTaskTableRowChangeEventHandler AllTaskTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllTaskTableRow(AllTaskTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableRow AddAllTaskTableRow(string SUPPLYNO, string SORTNO, string LINECODE, string BATCHNO, string SUPPLYBATCH, string ORDERDATE, string ORDERID, string CIGARETTECODE, string CIGARETTENAME, string CHANNELCODE, string QUANTITY, string STATUS, string STATUSNAME, string CHANNELNAME) {
                AllTaskTableRow rowAllTaskTableRow = ((AllTaskTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SUPPLYNO,
                        SORTNO,
                        LINECODE,
                        BATCHNO,
                        SUPPLYBATCH,
                        ORDERDATE,
                        ORDERID,
                        CIGARETTECODE,
                        CIGARETTENAME,
                        CHANNELCODE,
                        QUANTITY,
                        STATUS,
                        STATUSNAME,
                        CHANNELNAME};
                rowAllTaskTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllTaskTableRow);
                return rowAllTaskTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllTaskTableDataTable cln = ((AllTaskTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllTaskTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSUPPLYNO = base.Columns["SUPPLYNO"];
                this.columnSORTNO = base.Columns["SORTNO"];
                this.columnLINECODE = base.Columns["LINECODE"];
                this.columnBATCHNO = base.Columns["BATCHNO"];
                this.columnSUPPLYBATCH = base.Columns["SUPPLYBATCH"];
                this.columnORDERDATE = base.Columns["ORDERDATE"];
                this.columnORDERID = base.Columns["ORDERID"];
                this.columnCIGARETTECODE = base.Columns["CIGARETTECODE"];
                this.columnCIGARETTENAME = base.Columns["CIGARETTENAME"];
                this.columnCHANNELCODE = base.Columns["CHANNELCODE"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnSTATUSNAME = base.Columns["STATUSNAME"];
                this.columnCHANNELNAME = base.Columns["CHANNELNAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSUPPLYNO = new global::System.Data.DataColumn("SUPPLYNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLYNO);
                this.columnSORTNO = new global::System.Data.DataColumn("SORTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTNO);
                this.columnLINECODE = new global::System.Data.DataColumn("LINECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINECODE);
                this.columnBATCHNO = new global::System.Data.DataColumn("BATCHNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCHNO);
                this.columnSUPPLYBATCH = new global::System.Data.DataColumn("SUPPLYBATCH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLYBATCH);
                this.columnORDERDATE = new global::System.Data.DataColumn("ORDERDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERDATE);
                this.columnORDERID = new global::System.Data.DataColumn("ORDERID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERID);
                this.columnCIGARETTECODE = new global::System.Data.DataColumn("CIGARETTECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTECODE);
                this.columnCIGARETTENAME = new global::System.Data.DataColumn("CIGARETTENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTENAME);
                this.columnCHANNELCODE = new global::System.Data.DataColumn("CHANNELCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHANNELCODE);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnSTATUSNAME = new global::System.Data.DataColumn("STATUSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUSNAME);
                this.columnCHANNELNAME = new global::System.Data.DataColumn("CHANNELNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHANNELNAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableRow NewAllTaskTableRow() {
                return ((AllTaskTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllTaskTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllTaskTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllTaskTableRowChanged != null)) {
                    this.AllTaskTableRowChanged(this, new AllTaskTableRowChangeEvent(((AllTaskTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllTaskTableRowChanging != null)) {
                    this.AllTaskTableRowChanging(this, new AllTaskTableRowChangeEvent(((AllTaskTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllTaskTableRowDeleted != null)) {
                    this.AllTaskTableRowDeleted(this, new AllTaskTableRowChangeEvent(((AllTaskTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllTaskTableRowDeleting != null)) {
                    this.AllTaskTableRowDeleting(this, new AllTaskTableRowChangeEvent(((AllTaskTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllTaskTableRow(AllTaskTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AllTaskDataSet ds = new AllTaskDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllTaskTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllTaskTableRow : global::System.Data.DataRow {
            
            private AllTaskTableDataTable tableAllTaskTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllTaskTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllTaskTable = ((AllTaskTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUPPLYNO {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.SUPPLYNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“SUPPLYNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.SUPPLYNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SORTNO {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.SORTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“SORTNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.SORTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINECODE {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.LINECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“LINECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.LINECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCHNO {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.BATCHNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“BATCHNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.BATCHNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUPPLYBATCH {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.SUPPLYBATCHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“SUPPLYBATCH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.SUPPLYBATCHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERDATE {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.ORDERDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“ORDERDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.ORDERDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERID {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.ORDERIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“ORDERID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.ORDERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTECODE {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.CIGARETTECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“CIGARETTECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.CIGARETTECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTENAME {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.CIGARETTENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“CIGARETTENAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.CIGARETTENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHANNELCODE {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.CHANNELCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“CHANNELCODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.CHANNELCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUANTITY {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“QUANTITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“STATUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUSNAME {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.STATUSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“STATUSNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.STATUSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHANNELNAME {
                get {
                    try {
                        return ((string)(this[this.tableAllTaskTable.CHANNELNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AllTaskTable”中列“CHANNELNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAllTaskTable.CHANNELNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLYNONull() {
                return this.IsNull(this.tableAllTaskTable.SUPPLYNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLYNONull() {
                this[this.tableAllTaskTable.SUPPLYNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTNONull() {
                return this.IsNull(this.tableAllTaskTable.SORTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTNONull() {
                this[this.tableAllTaskTable.SORTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINECODENull() {
                return this.IsNull(this.tableAllTaskTable.LINECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINECODENull() {
                this[this.tableAllTaskTable.LINECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBATCHNONull() {
                return this.IsNull(this.tableAllTaskTable.BATCHNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBATCHNONull() {
                this[this.tableAllTaskTable.BATCHNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLYBATCHNull() {
                return this.IsNull(this.tableAllTaskTable.SUPPLYBATCHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLYBATCHNull() {
                this[this.tableAllTaskTable.SUPPLYBATCHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERDATENull() {
                return this.IsNull(this.tableAllTaskTable.ORDERDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERDATENull() {
                this[this.tableAllTaskTable.ORDERDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERIDNull() {
                return this.IsNull(this.tableAllTaskTable.ORDERIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERIDNull() {
                this[this.tableAllTaskTable.ORDERIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTECODENull() {
                return this.IsNull(this.tableAllTaskTable.CIGARETTECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTECODENull() {
                this[this.tableAllTaskTable.CIGARETTECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTENAMENull() {
                return this.IsNull(this.tableAllTaskTable.CIGARETTENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTENAMENull() {
                this[this.tableAllTaskTable.CIGARETTENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHANNELCODENull() {
                return this.IsNull(this.tableAllTaskTable.CHANNELCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHANNELCODENull() {
                this[this.tableAllTaskTable.CHANNELCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tableAllTaskTable.QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tableAllTaskTable.QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableAllTaskTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableAllTaskTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNAMENull() {
                return this.IsNull(this.tableAllTaskTable.STATUSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNAMENull() {
                this[this.tableAllTaskTable.STATUSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHANNELNAMENull() {
                return this.IsNull(this.tableAllTaskTable.CHANNELNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHANNELNAMENull() {
                this[this.tableAllTaskTable.CHANNELNAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllTaskTableRowChangeEvent : global::System.EventArgs {
            
            private AllTaskTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableRowChangeEvent(AllTaskTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllTaskTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591