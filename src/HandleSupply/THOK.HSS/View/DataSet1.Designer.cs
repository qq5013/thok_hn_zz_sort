//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4927
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.HSS.View {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private AS_SC_HANDLESUPPLYDataTable tableAS_SC_HANDLESUPPLY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AS_SC_HANDLESUPPLY"] != null)) {
                    base.Tables.Add(new AS_SC_HANDLESUPPLYDataTable(ds.Tables["AS_SC_HANDLESUPPLY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AS_SC_HANDLESUPPLYDataTable AS_SC_HANDLESUPPLY {
            get {
                return this.tableAS_SC_HANDLESUPPLY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AS_SC_HANDLESUPPLY"] != null)) {
                    base.Tables.Add(new AS_SC_HANDLESUPPLYDataTable(ds.Tables["AS_SC_HANDLESUPPLY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAS_SC_HANDLESUPPLY = ((AS_SC_HANDLESUPPLYDataTable)(base.Tables["AS_SC_HANDLESUPPLY"]));
            if ((initTable == true)) {
                if ((this.tableAS_SC_HANDLESUPPLY != null)) {
                    this.tableAS_SC_HANDLESUPPLY.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAS_SC_HANDLESUPPLY = new AS_SC_HANDLESUPPLYDataTable();
            base.Tables.Add(this.tableAS_SC_HANDLESUPPLY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAS_SC_HANDLESUPPLY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AS_SC_HANDLESUPPLYRowChangeEventHandler(object sender, AS_SC_HANDLESUPPLYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AS_SC_HANDLESUPPLYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSUPPLYNO;
            
            private global::System.Data.DataColumn columnSORTNO;
            
            private global::System.Data.DataColumn columnLINECODE;
            
            private global::System.Data.DataColumn columnBATCHNO;
            
            private global::System.Data.DataColumn columnSUPPLYBATCH;
            
            private global::System.Data.DataColumn columnORDERDATE;
            
            private global::System.Data.DataColumn columnORDERID;
            
            private global::System.Data.DataColumn columnCIGARETTECODE;
            
            private global::System.Data.DataColumn columnCIGARETTENAME;
            
            private global::System.Data.DataColumn columnCHANNELCODE;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYDataTable() {
                this.TableName = "AS_SC_HANDLESUPPLY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AS_SC_HANDLESUPPLYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AS_SC_HANDLESUPPLYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLYNOColumn {
                get {
                    return this.columnSUPPLYNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTNOColumn {
                get {
                    return this.columnSORTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINECODEColumn {
                get {
                    return this.columnLINECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BATCHNOColumn {
                get {
                    return this.columnBATCHNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLYBATCHColumn {
                get {
                    return this.columnSUPPLYBATCH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERDATEColumn {
                get {
                    return this.columnORDERDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERIDColumn {
                get {
                    return this.columnORDERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTECODEColumn {
                get {
                    return this.columnCIGARETTECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTENAMEColumn {
                get {
                    return this.columnCIGARETTENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHANNELCODEColumn {
                get {
                    return this.columnCHANNELCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRow this[int index] {
                get {
                    return ((AS_SC_HANDLESUPPLYRow)(this.Rows[index]));
                }
            }
            
            public event AS_SC_HANDLESUPPLYRowChangeEventHandler AS_SC_HANDLESUPPLYRowChanging;
            
            public event AS_SC_HANDLESUPPLYRowChangeEventHandler AS_SC_HANDLESUPPLYRowChanged;
            
            public event AS_SC_HANDLESUPPLYRowChangeEventHandler AS_SC_HANDLESUPPLYRowDeleting;
            
            public event AS_SC_HANDLESUPPLYRowChangeEventHandler AS_SC_HANDLESUPPLYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAS_SC_HANDLESUPPLYRow(AS_SC_HANDLESUPPLYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRow AddAS_SC_HANDLESUPPLYRow(int SORTNO, string LINECODE, string BATCHNO, int SUPPLYBATCH, System.DateTime ORDERDATE, string ORDERID, string CIGARETTECODE, string CIGARETTENAME, string CHANNELCODE, int QUANTITY, string STATUS) {
                AS_SC_HANDLESUPPLYRow rowAS_SC_HANDLESUPPLYRow = ((AS_SC_HANDLESUPPLYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SORTNO,
                        LINECODE,
                        BATCHNO,
                        SUPPLYBATCH,
                        ORDERDATE,
                        ORDERID,
                        CIGARETTECODE,
                        CIGARETTENAME,
                        CHANNELCODE,
                        QUANTITY,
                        STATUS};
                rowAS_SC_HANDLESUPPLYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAS_SC_HANDLESUPPLYRow);
                return rowAS_SC_HANDLESUPPLYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRow FindBySUPPLYNO(int SUPPLYNO) {
                return ((AS_SC_HANDLESUPPLYRow)(this.Rows.Find(new object[] {
                            SUPPLYNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AS_SC_HANDLESUPPLYDataTable cln = ((AS_SC_HANDLESUPPLYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AS_SC_HANDLESUPPLYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSUPPLYNO = base.Columns["SUPPLYNO"];
                this.columnSORTNO = base.Columns["SORTNO"];
                this.columnLINECODE = base.Columns["LINECODE"];
                this.columnBATCHNO = base.Columns["BATCHNO"];
                this.columnSUPPLYBATCH = base.Columns["SUPPLYBATCH"];
                this.columnORDERDATE = base.Columns["ORDERDATE"];
                this.columnORDERID = base.Columns["ORDERID"];
                this.columnCIGARETTECODE = base.Columns["CIGARETTECODE"];
                this.columnCIGARETTENAME = base.Columns["CIGARETTENAME"];
                this.columnCHANNELCODE = base.Columns["CHANNELCODE"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnSTATUS = base.Columns["STATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSUPPLYNO = new global::System.Data.DataColumn("SUPPLYNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLYNO);
                this.columnSORTNO = new global::System.Data.DataColumn("SORTNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTNO);
                this.columnLINECODE = new global::System.Data.DataColumn("LINECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINECODE);
                this.columnBATCHNO = new global::System.Data.DataColumn("BATCHNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCHNO);
                this.columnSUPPLYBATCH = new global::System.Data.DataColumn("SUPPLYBATCH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLYBATCH);
                this.columnORDERDATE = new global::System.Data.DataColumn("ORDERDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERDATE);
                this.columnORDERID = new global::System.Data.DataColumn("ORDERID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERID);
                this.columnCIGARETTECODE = new global::System.Data.DataColumn("CIGARETTECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTECODE);
                this.columnCIGARETTENAME = new global::System.Data.DataColumn("CIGARETTENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTENAME);
                this.columnCHANNELCODE = new global::System.Data.DataColumn("CHANNELCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHANNELCODE);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSUPPLYNO}, true));
                this.columnSUPPLYNO.AutoIncrement = true;
                this.columnSUPPLYNO.AllowDBNull = false;
                this.columnSUPPLYNO.ReadOnly = true;
                this.columnSUPPLYNO.Unique = true;
                this.columnSORTNO.AllowDBNull = false;
                this.columnLINECODE.AllowDBNull = false;
                this.columnLINECODE.MaxLength = 2;
                this.columnBATCHNO.AllowDBNull = false;
                this.columnBATCHNO.MaxLength = 12;
                this.columnORDERDATE.AllowDBNull = false;
                this.columnORDERID.AllowDBNull = false;
                this.columnORDERID.MaxLength = 30;
                this.columnCIGARETTECODE.AllowDBNull = false;
                this.columnCIGARETTECODE.MaxLength = 12;
                this.columnCIGARETTENAME.AllowDBNull = false;
                this.columnCIGARETTENAME.MaxLength = 50;
                this.columnCHANNELCODE.AllowDBNull = false;
                this.columnCHANNELCODE.MaxLength = 50;
                this.columnQUANTITY.AllowDBNull = false;
                this.columnSTATUS.AllowDBNull = false;
                this.columnSTATUS.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRow NewAS_SC_HANDLESUPPLYRow() {
                return ((AS_SC_HANDLESUPPLYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AS_SC_HANDLESUPPLYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AS_SC_HANDLESUPPLYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AS_SC_HANDLESUPPLYRowChanged != null)) {
                    this.AS_SC_HANDLESUPPLYRowChanged(this, new AS_SC_HANDLESUPPLYRowChangeEvent(((AS_SC_HANDLESUPPLYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AS_SC_HANDLESUPPLYRowChanging != null)) {
                    this.AS_SC_HANDLESUPPLYRowChanging(this, new AS_SC_HANDLESUPPLYRowChangeEvent(((AS_SC_HANDLESUPPLYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AS_SC_HANDLESUPPLYRowDeleted != null)) {
                    this.AS_SC_HANDLESUPPLYRowDeleted(this, new AS_SC_HANDLESUPPLYRowChangeEvent(((AS_SC_HANDLESUPPLYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AS_SC_HANDLESUPPLYRowDeleting != null)) {
                    this.AS_SC_HANDLESUPPLYRowDeleting(this, new AS_SC_HANDLESUPPLYRowChangeEvent(((AS_SC_HANDLESUPPLYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAS_SC_HANDLESUPPLYRow(AS_SC_HANDLESUPPLYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AS_SC_HANDLESUPPLYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AS_SC_HANDLESUPPLYRow : global::System.Data.DataRow {
            
            private AS_SC_HANDLESUPPLYDataTable tableAS_SC_HANDLESUPPLY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AS_SC_HANDLESUPPLYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAS_SC_HANDLESUPPLY = ((AS_SC_HANDLESUPPLYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SUPPLYNO {
                get {
                    return ((int)(this[this.tableAS_SC_HANDLESUPPLY.SUPPLYNOColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.SUPPLYNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SORTNO {
                get {
                    return ((int)(this[this.tableAS_SC_HANDLESUPPLY.SORTNOColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.SORTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINECODE {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.LINECODEColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.LINECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCHNO {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.BATCHNOColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.BATCHNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SUPPLYBATCH {
                get {
                    try {
                        return ((int)(this[this.tableAS_SC_HANDLESUPPLY.SUPPLYBATCHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AS_SC_HANDLESUPPLY”中列“SUPPLYBATCH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.SUPPLYBATCHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ORDERDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableAS_SC_HANDLESUPPLY.ORDERDATEColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.ORDERDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERID {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.ORDERIDColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.ORDERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTECODE {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.CIGARETTECODEColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.CIGARETTECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTENAME {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.CIGARETTENAMEColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.CIGARETTENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHANNELCODE {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.CHANNELCODEColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.CHANNELCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUANTITY {
                get {
                    return ((int)(this[this.tableAS_SC_HANDLESUPPLY.QUANTITYColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    return ((string)(this[this.tableAS_SC_HANDLESUPPLY.STATUSColumn]));
                }
                set {
                    this[this.tableAS_SC_HANDLESUPPLY.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLYBATCHNull() {
                return this.IsNull(this.tableAS_SC_HANDLESUPPLY.SUPPLYBATCHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLYBATCHNull() {
                this[this.tableAS_SC_HANDLESUPPLY.SUPPLYBATCHColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AS_SC_HANDLESUPPLYRowChangeEvent : global::System.EventArgs {
            
            private AS_SC_HANDLESUPPLYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRowChangeEvent(AS_SC_HANDLESUPPLYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AS_SC_HANDLESUPPLYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace THOK.HSS.View.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AS_SC_HANDLESUPPLYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AS_SC_HANDLESUPPLYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AS_SC_HANDLESUPPLY";
            tableMapping.ColumnMappings.Add("SUPPLYNO", "SUPPLYNO");
            tableMapping.ColumnMappings.Add("SORTNO", "SORTNO");
            tableMapping.ColumnMappings.Add("LINECODE", "LINECODE");
            tableMapping.ColumnMappings.Add("BATCHNO", "BATCHNO");
            tableMapping.ColumnMappings.Add("SUPPLYBATCH", "SUPPLYBATCH");
            tableMapping.ColumnMappings.Add("ORDERDATE", "ORDERDATE");
            tableMapping.ColumnMappings.Add("ORDERID", "ORDERID");
            tableMapping.ColumnMappings.Add("CIGARETTECODE", "CIGARETTECODE");
            tableMapping.ColumnMappings.Add("CIGARETTENAME", "CIGARETTENAME");
            tableMapping.ColumnMappings.Add("CHANNELCODE", "CHANNELCODE");
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AS_SC_HANDLESUPPLY] WHERE (([SUPPLYNO] = @Original_SUPPLYNO) AND ([SORTNO] = @Original_SORTNO) AND ([LINECODE] = @Original_LINECODE) AND ([BATCHNO] = @Original_BATCHNO) AND ((@IsNull_SUPPLYBATCH = 1 AND [SUPPLYBATCH] IS NULL) OR ([SUPPLYBATCH] = @Original_SUPPLYBATCH)) AND ([ORDERDATE] = @Original_ORDERDATE) AND ([ORDERID] = @Original_ORDERID) AND ([CIGARETTECODE] = @Original_CIGARETTECODE) AND ([CIGARETTENAME] = @Original_CIGARETTENAME) AND ([CHANNELCODE] = @Original_CHANNELCODE) AND ([QUANTITY] = @Original_QUANTITY) AND ([STATUS] = @Original_STATUS))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SUPPLYNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SORTNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SORTNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LINECODE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LINECODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BATCHNO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BATCHNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORDERDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORDERID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIGARETTECODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTECODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIGARETTENAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTENAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CHANNELCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHANNELCODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QUANTITY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STATUS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STATUS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [AS_SC_HANDLESUPPLY] ([SORTNO], [LINECODE], [BATCHNO], [SUPPLYBATCH], [ORDERDATE], [ORDERID], [CIGARETTECODE], [CIGARETTENAME], [CHANNELCODE], [QUANTITY], [STATUS]) VALUES (@SORTNO, @LINECODE, @BATCHNO, @SUPPLYBATCH, @ORDERDATE, @ORDERID, @CIGARETTECODE, @CIGARETTENAME, @CHANNELCODE, @QUANTITY, @STATUS);
SELECT SUPPLYNO, SORTNO, LINECODE, BATCHNO, SUPPLYBATCH, ORDERDATE, ORDERID, CIGARETTECODE, CIGARETTENAME, CHANNELCODE, QUANTITY, STATUS FROM AS_SC_HANDLESUPPLY WHERE (SUPPLYNO = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SORTNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SORTNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LINECODE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LINECODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BATCHNO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BATCHNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORDERDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORDERID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIGARETTECODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTECODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIGARETTENAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTENAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CHANNELCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHANNELCODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QUANTITY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STATUS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STATUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AS_SC_HANDLESUPPLY] SET [SORTNO] = @SORTNO, [LINECODE] = @LINECODE, [BATCHNO] = @BATCHNO, [SUPPLYBATCH] = @SUPPLYBATCH, [ORDERDATE] = @ORDERDATE, [ORDERID] = @ORDERID, [CIGARETTECODE] = @CIGARETTECODE, [CIGARETTENAME] = @CIGARETTENAME, [CHANNELCODE] = @CHANNELCODE, [QUANTITY] = @QUANTITY, [STATUS] = @STATUS WHERE (([SUPPLYNO] = @Original_SUPPLYNO) AND ([SORTNO] = @Original_SORTNO) AND ([LINECODE] = @Original_LINECODE) AND ([BATCHNO] = @Original_BATCHNO) AND ((@IsNull_SUPPLYBATCH = 1 AND [SUPPLYBATCH] IS NULL) OR ([SUPPLYBATCH] = @Original_SUPPLYBATCH)) AND ([ORDERDATE] = @Original_ORDERDATE) AND ([ORDERID] = @Original_ORDERID) AND ([CIGARETTECODE] = @Original_CIGARETTECODE) AND ([CIGARETTENAME] = @Original_CIGARETTENAME) AND ([CHANNELCODE] = @Original_CHANNELCODE) AND ([QUANTITY] = @Original_QUANTITY) AND ([STATUS] = @Original_STATUS));
SELECT SUPPLYNO, SORTNO, LINECODE, BATCHNO, SUPPLYBATCH, ORDERDATE, ORDERID, CIGARETTECODE, CIGARETTENAME, CHANNELCODE, QUANTITY, STATUS FROM AS_SC_HANDLESUPPLY WHERE (SUPPLYNO = @SUPPLYNO)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SORTNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SORTNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LINECODE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LINECODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BATCHNO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BATCHNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORDERDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORDERID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIGARETTECODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTECODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CIGARETTENAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTENAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CHANNELCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHANNELCODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QUANTITY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STATUS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STATUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SUPPLYNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SORTNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SORTNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LINECODE", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LINECODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BATCHNO", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BATCHNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SUPPLYBATCH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYBATCH", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORDERDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORDERID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORDERID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIGARETTECODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTECODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CIGARETTENAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CIGARETTENAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CHANNELCODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHANNELCODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QUANTITY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STATUS", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STATUS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUPPLYNO", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "SUPPLYNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::THOK.HSS.Properties.Settings.Default.LogisticsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT   *\r\nFROM      AS_SC_HANDLESUPPLY";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AS_SC_HANDLESUPPLYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AS_SC_HANDLESUPPLYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AS_SC_HANDLESUPPLYDataTable dataTable = new DataSet1.AS_SC_HANDLESUPPLYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AS_SC_HANDLESUPPLYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AS_SC_HANDLESUPPLY");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SUPPLYNO, int Original_SORTNO, string Original_LINECODE, string Original_BATCHNO, global::System.Nullable<int> Original_SUPPLYBATCH, System.DateTime Original_ORDERDATE, string Original_ORDERID, string Original_CIGARETTECODE, string Original_CIGARETTENAME, string Original_CHANNELCODE, int Original_QUANTITY, string Original_STATUS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SUPPLYNO));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SORTNO));
            if ((Original_LINECODE == null)) {
                throw new global::System.ArgumentNullException("Original_LINECODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_LINECODE));
            }
            if ((Original_BATCHNO == null)) {
                throw new global::System.ArgumentNullException("Original_BATCHNO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BATCHNO));
            }
            if ((Original_SUPPLYBATCH.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_SUPPLYBATCH.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_ORDERDATE));
            if ((Original_ORDERID == null)) {
                throw new global::System.ArgumentNullException("Original_ORDERID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ORDERID));
            }
            if ((Original_CIGARETTECODE == null)) {
                throw new global::System.ArgumentNullException("Original_CIGARETTECODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CIGARETTECODE));
            }
            if ((Original_CIGARETTENAME == null)) {
                throw new global::System.ArgumentNullException("Original_CIGARETTENAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_CIGARETTENAME));
            }
            if ((Original_CHANNELCODE == null)) {
                throw new global::System.ArgumentNullException("Original_CHANNELCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CHANNELCODE));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_QUANTITY));
            if ((Original_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_STATUS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_STATUS));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SORTNO, string LINECODE, string BATCHNO, global::System.Nullable<int> SUPPLYBATCH, System.DateTime ORDERDATE, string ORDERID, string CIGARETTECODE, string CIGARETTENAME, string CHANNELCODE, int QUANTITY, string STATUS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SORTNO));
            if ((LINECODE == null)) {
                throw new global::System.ArgumentNullException("LINECODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LINECODE));
            }
            if ((BATCHNO == null)) {
                throw new global::System.ArgumentNullException("BATCHNO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(BATCHNO));
            }
            if ((SUPPLYBATCH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(SUPPLYBATCH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ORDERDATE));
            if ((ORDERID == null)) {
                throw new global::System.ArgumentNullException("ORDERID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ORDERID));
            }
            if ((CIGARETTECODE == null)) {
                throw new global::System.ArgumentNullException("CIGARETTECODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CIGARETTECODE));
            }
            if ((CIGARETTENAME == null)) {
                throw new global::System.ArgumentNullException("CIGARETTENAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CIGARETTENAME));
            }
            if ((CHANNELCODE == null)) {
                throw new global::System.ArgumentNullException("CHANNELCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CHANNELCODE));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(QUANTITY));
            if ((STATUS == null)) {
                throw new global::System.ArgumentNullException("STATUS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(STATUS));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int SORTNO, 
                    string LINECODE, 
                    string BATCHNO, 
                    global::System.Nullable<int> SUPPLYBATCH, 
                    System.DateTime ORDERDATE, 
                    string ORDERID, 
                    string CIGARETTECODE, 
                    string CIGARETTENAME, 
                    string CHANNELCODE, 
                    int QUANTITY, 
                    string STATUS, 
                    int Original_SUPPLYNO, 
                    int Original_SORTNO, 
                    string Original_LINECODE, 
                    string Original_BATCHNO, 
                    global::System.Nullable<int> Original_SUPPLYBATCH, 
                    System.DateTime Original_ORDERDATE, 
                    string Original_ORDERID, 
                    string Original_CIGARETTECODE, 
                    string Original_CIGARETTENAME, 
                    string Original_CHANNELCODE, 
                    int Original_QUANTITY, 
                    string Original_STATUS, 
                    int SUPPLYNO) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SORTNO));
            if ((LINECODE == null)) {
                throw new global::System.ArgumentNullException("LINECODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LINECODE));
            }
            if ((BATCHNO == null)) {
                throw new global::System.ArgumentNullException("BATCHNO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(BATCHNO));
            }
            if ((SUPPLYBATCH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(SUPPLYBATCH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ORDERDATE));
            if ((ORDERID == null)) {
                throw new global::System.ArgumentNullException("ORDERID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ORDERID));
            }
            if ((CIGARETTECODE == null)) {
                throw new global::System.ArgumentNullException("CIGARETTECODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CIGARETTECODE));
            }
            if ((CIGARETTENAME == null)) {
                throw new global::System.ArgumentNullException("CIGARETTENAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CIGARETTENAME));
            }
            if ((CHANNELCODE == null)) {
                throw new global::System.ArgumentNullException("CHANNELCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CHANNELCODE));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(QUANTITY));
            if ((STATUS == null)) {
                throw new global::System.ArgumentNullException("STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(STATUS));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_SUPPLYNO));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_SORTNO));
            if ((Original_LINECODE == null)) {
                throw new global::System.ArgumentNullException("Original_LINECODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_LINECODE));
            }
            if ((Original_BATCHNO == null)) {
                throw new global::System.ArgumentNullException("Original_BATCHNO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_BATCHNO));
            }
            if ((Original_SUPPLYBATCH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_SUPPLYBATCH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_ORDERDATE));
            if ((Original_ORDERID == null)) {
                throw new global::System.ArgumentNullException("Original_ORDERID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_ORDERID));
            }
            if ((Original_CIGARETTECODE == null)) {
                throw new global::System.ArgumentNullException("Original_CIGARETTECODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_CIGARETTECODE));
            }
            if ((Original_CIGARETTENAME == null)) {
                throw new global::System.ArgumentNullException("Original_CIGARETTENAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CIGARETTENAME));
            }
            if ((Original_CHANNELCODE == null)) {
                throw new global::System.ArgumentNullException("Original_CHANNELCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_CHANNELCODE));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_QUANTITY));
            if ((Original_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_STATUS));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(SUPPLYNO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int SORTNO, 
                    string LINECODE, 
                    string BATCHNO, 
                    global::System.Nullable<int> SUPPLYBATCH, 
                    System.DateTime ORDERDATE, 
                    string ORDERID, 
                    string CIGARETTECODE, 
                    string CIGARETTENAME, 
                    string CHANNELCODE, 
                    int QUANTITY, 
                    string STATUS, 
                    int Original_SUPPLYNO, 
                    int Original_SORTNO, 
                    string Original_LINECODE, 
                    string Original_BATCHNO, 
                    global::System.Nullable<int> Original_SUPPLYBATCH, 
                    System.DateTime Original_ORDERDATE, 
                    string Original_ORDERID, 
                    string Original_CIGARETTECODE, 
                    string Original_CIGARETTENAME, 
                    string Original_CHANNELCODE, 
                    int Original_QUANTITY, 
                    string Original_STATUS) {
            return this.Update(SORTNO, LINECODE, BATCHNO, SUPPLYBATCH, ORDERDATE, ORDERID, CIGARETTECODE, CIGARETTENAME, CHANNELCODE, QUANTITY, STATUS, Original_SUPPLYNO, Original_SORTNO, Original_LINECODE, Original_BATCHNO, Original_SUPPLYBATCH, Original_ORDERDATE, Original_ORDERID, Original_CIGARETTECODE, Original_CIGARETTENAME, Original_CHANNELCODE, Original_QUANTITY, Original_STATUS, Original_SUPPLYNO);
        }
    }
}

#pragma warning restore 1591